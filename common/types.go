package common

import (
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// SubmitTransactionRequest represents a request for a relayer to submit a transaction
// on the sender's behalf.
// It contains all the necessary info for the relayer to construct a forward request.
type SubmitTransactionRequest struct {
	From      ethcommon.Address `json:"from"`
	To        ethcommon.Address `json:"to"`
	Value     *big.Int          `json:"value"`
	Gas       *big.Int          `json:"gas"`
	Nonce     *big.Int          `json:"nonce"`
	Data      []byte            `json:"data"`
	Signature []byte            `json:"signature"`

	// GSN-specific
	ValidUntilTime *big.Int `json:"validUntilTime,omitempty"`

	DomainSeparator [32]byte `json:"domainSeparator,omitempty"`
	RequestTypeHash [32]byte `json:"requestTypeHash,omitempty"`
	SuffixData      []byte   `json:"suffixData,omitempty"`
}

// SubmitTransactionResponse is returned by a relayer upon successful transaction
// submission. It contains the transaction hash.
type SubmitTransactionResponse struct {
	TxHash ethcommon.Hash `json:"transactionHash"`
}

// NewMinimalSubmitTransactionRequest returns a SubmitTransactionRequest containing all the
// information needed for a MinimalForwarder forward request.
func NewMinimalSubmitTransactionRequest(
	from, to ethcommon.Address,
	value, gas, nonce *big.Int,
	data, signature []byte,
) *SubmitTransactionRequest {
	return &SubmitTransactionRequest{
		From:      from,
		To:        to,
		Value:     value,
		Gas:       gas,
		Nonce:     nonce,
		Data:      data,
		Signature: signature,
	}
}

// NewGSNSubmitTransactionRequest returns a SubmitTransactionRequest containing all the
// information needed for a GSN Forwarder forward request.
func NewGSNSubmitTransactionRequest(
	from, to ethcommon.Address,
	value, gas, nonce *big.Int,
	data, signature []byte,
	validUntilTime *big.Int,
	domainSeparator, requestTypeHash [32]byte,
	suffixData []byte,
) *SubmitTransactionRequest {
	return &SubmitTransactionRequest{
		From:            from,
		To:              to,
		Value:           value,
		Gas:             gas,
		Nonce:           nonce,
		Data:            data,
		Signature:       signature,
		ValidUntilTime:  validUntilTime,
		DomainSeparator: domainSeparator,
		RequestTypeHash: requestTypeHash,
		SuffixData:      suffixData,
	}
}

// Forwarder must be implemented by a forwarder contract used by a *relayer.Relayer.
// These methods are wrappers around the methods auto-generated by abigen.
//
// See `examples/gsn_forwarder/i_forwarder_wrapped.go` or
// `examples/minimal_forwarder/i_minimal_forwarder_wrapped.go`for examples.
type Forwarder interface {
	GetNonce(opts *bind.CallOpts, from ethcommon.Address) (*big.Int, error)

	Verify(
		opts *bind.CallOpts,
		req ForwardRequest,
		domainSeparator,
		requestTypeHash [32]byte,
		suffixData,
		signature []byte,
	) (bool, error)

	Execute(
		opts *bind.TransactOpts,
		req ForwardRequest,
		domainSeparator,
		requestTypeHash [32]byte,
		suffixData,
		signature []byte,
	) (*types.Transaction, error)

	NewEmptyForwardRequest() ForwardRequest
}

// ForwardRequest must be implemented by a request type used by a forwarder contract.
//
// See `examples/gsn_forwarder/request.go` or `examples/minimal_forwarder/request.go`
// for examples.
type ForwardRequest interface {
	// FromSubmitTransactionRequest set the type underlying the ForwardRequest
	// using a *SubmitTransactionRequest.
	//
	// Note: not all fields in the *SubmitTransactionRequest need be used depending
	// on the implementation.
	FromSubmitTransactionRequest(*SubmitTransactionRequest)

	// Pack uses ABI encoding to pack the underlying ForwardRequest, appending
	// optional `suffixData` to the end.
	//
	// See examples/gsn_forwarder/IForwarderForwardRequest.Pack() or
	// examples/minimal_forwarder/IMinimalForwarderForwardRequest.Pack()
	// for details.
	Pack(suffixData []byte) ([]byte, error)
}
